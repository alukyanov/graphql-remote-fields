module GraphQL
  module RemoteFields
    module Resolvers
      class Base
        # Struct contains autogenerated query and variables
        # this values will sent on remote server
        Result = Struct.new(:query, :vars, keyword_init: true)

        attr_reader :url, :headers

        def initialize(url:, **kwargs)
          @url = url
          @headers = kwargs[:headers] || {}
        end

        # Entry point for remote resolvers.
        # Returns a response from the remote server.
        # @param obj    [GraphQL::Schema::Object]
        # @param args   [GraphQL::Query::Arguments]
        # @param ctx    [GraphQL::Query::Context]
        # @param query_block [lambda]
        def resolve(obj, args, ctx, query_block = nil)
          query_builder = QueryBuilder.new(ctx)

          predefined_query = query_block.call(obj, ctx) if query_block

          current_result = Result.new(
            query: predefined_query || query_builder.build,
            vars:  query_builder.expose_args(args)
          )

          final = resolve_remote_field(obj: obj,
                                       ctx: ctx,
                                       current_result: current_result)

          response = client.execute(final[:query], variables: final[:vars])
          response.public_send(ctx.ast_node.name)
        end

        # Overwrite this method in classes inherited from Resolvers::Base
        # You can modify headers etc based on args in this method.
        # @param obj: [GraphQL::Schema::Object]
        # @param ctx: [GraphQL::Query::Context]
        # @param current_result: [Struct] autogenerated graphql query
        # @return Must return [Struct], request will use this :query, :vars
        def resolve_remote_field(obj:, ctx:, current_result:)
          current_result
        end

        private

        def client
          @client ||= Client.new(url, headers)
        end
      end
    end
  end
end
